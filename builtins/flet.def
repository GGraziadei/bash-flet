This file is flet.def, from which is created flet.c.
It implements the builtin "flet" in Bash.

Copyright (C) 1987-2009 Free Software Foundation, Inc.

This file is part of GNU Bash, the Bourne Again SHell.

Bash is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Bash is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Bash.  If not, see <http://www.gnu.org/licenses/>.

$BUILTIN flet

$FUNCTION flet_builtin
$PRODUCES flet.c
$SHORT_DOC flet

Evaluate arithmetic floating point expressions.

Options:
  -f	declare input from file PATH
  -d	enable DEBUG (bison debugger)

Evaluate each ARG as an arithmetic expression. Each expression ends with semicolumn. The following list of operators is
grouped into levels of equal-precedence operators.  The levels are listed
in order of decreasing precedence.

	id++, id--	variable post-increment, post-decrement
	++id, --id	variable pre-increment, pre-decrement
	-, +		unary minus, plus
	!, ~		logical and bitwise negation
	**			exponentiation
	*, /, %		multiplication, division, remainder
	+, -		addition, subtraction
	<<, >>		left and right bitwise shifts
	<=, >=, <, >	comparison
	==, !=		equality, inequality
	&		bitwise AND
	^		bitwise XOR
	|		bitwise OR
	&&		logical AND
	||		logical OR
	boolean_exp ? scalar_exp : scalar_exp conditional operator
	=, *=, /=, %=,
	+=, -=, <<=, >>=,
	&=, ^=, |=	assignment
	id=scalar_exp|boolean_exp
	acos(scalar_exp) computes arc cosine. 
	acosh(scalar_exp) computes arc hyperbolic cosine. 
	asin(scalar_exp) computes arc sine. 
	asinh(scalar_exp) computes the hyperbolic of arc sine of an argument. 
	atan(scalar_exp) computes the arc tangent of an argument. 
	atan2(scalar_exp) computes the arc tangent of an argument. 
	atanh(scalar_exp) computes arc hyperbolic tangent. 
	cbrt(scalar_exp) computes cube root of a number.
	ceil(scalar_exp) computes the nearest integer greater than argument. 
	cos(scalar_exp) computes the cosine of an argument. 
	cosh(scalar_exp) computer hyperbolic cosine. 
	exp(scalar_exp) computes the exponential raised to the argument. 
	fabs(scalar_exp) computes absolute value. 
	floor(scalar_exp) calculates the nearest integer less than argument. 
	hypot(scalar_exp) computes hypotenuse. 
	log(scalar_exp) computes natural logarithm of an argument. 
	log10(scalar_exp) computes the base 10 logarithm of an argument. 
	pow(scalar_exp) Computes power of a number. 
	sin(scalar_exp) compute sine of a number.
	sinh(scalar_exp) computes the hyperbolic sine of an argument.
	sqrt(scalar_exp) computes square root of a number. 
	tan(scalar_exp) computes tangent. 
	tanh(scalar_exp) computes the hyperbolic tangent of an argument.

Shell variables are allowed as operands.  The name of the variable
is replaced by its value (coerced to a fixed-width integer) within
an expression.  The variable need not have its integer attribute
turned on to be used in an expression.

Operators are evaluated in order of precedence.  Sub-expressions in
parentheses are evaluated first and may override the precedence
rules above.

Exit Status:
If the last ARG evaluates to 0, flet returns 1; flet returns 0 otherwise.
$END

#include <config.h>

#if defined (HAVE_UNISTD_H)
#  ifdef _MINIX
#    include <sys/types.h>
#  endif
#  include <unistd.h>
#endif

#include <stdio.h>

#include "../bashintl.h"
#include "../shell.h"
#include "common.h"

#include "bashgetopt.h"
#include "../bashansi.h"

#include "../lib/flet/lib_flet.h"
#include "../lib/flet/sym_table.h"

extern sym_entry* sym_table;

void update_variables(){
	char buffer[128];
	sym_entry *p = sym_table;
	while(p != NULL) {
		sprintf(buffer, "%f", p->value.real_value);
		bind_variable(p->name, buffer, 0 );
		p = p->next;
	}
	free_sym_table();
}

/* Arithmetic FLET function. */
int
flet_builtin (WORD_LIST *list)
{
  intmax_t ret;
  int expok;
  
  if (list == 0)
    {
      builtin_error (_("expression expected"));
      return (EXECUTION_FAILURE);
    }

  USE_VAR(list);

  int opt, from_file, debug_mode;
  char *vname;
  debug_mode = from_file = 0;
  vname = NULL;

  reset_internal_getopt ();
  while ((opt = internal_getopt (list, "df:")) != -1){
	switch(opt){
		case 'f':
			from_file = 1;
			vname = list_optarg;
			break;
		case 'd':
			debug_mode = 1;
			break;	
		CASE_HELPOPT;
		default:
			builtin_usage ();
			return (EX_USAGE);
	}
  }

	if(from_file)
		{
			printf("Evaluation form file: %s\n\n", vname);
			int res = file_flet(vname, debug_mode);
			if (res != 0) return (EXECUTION_FAILURE);
			update_variables();
			return ((ret == 0) ? EXECUTION_FAILURE : EXECUTION_SUCCESS);
		}

	list = loptend; //end of arg

	for (; list; list = list->next){
		int res = str_buf_flet(list->word->word, debug_mode);
		if (res != 0) return (EXECUTION_FAILURE);
		update_variables();
	}

  	return ((ret == 0) ? EXECUTION_FAILURE : EXECUTION_SUCCESS);
}


